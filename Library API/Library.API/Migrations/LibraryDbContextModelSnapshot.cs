// <auto-generated />
using System;
using Library.API.data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Library.API.Migrations
{
    [DbContext(typeof(LibraryDbContext))]
    partial class LibraryDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AuthorBook", b =>
                {
                    b.Property<Guid>("authorsauthor_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("booksbook_id")
                        .HasColumnType("uuid");

                    b.HasKey("authorsauthor_id", "booksbook_id");

                    b.HasIndex("booksbook_id");

                    b.ToTable("AuthorBook");
                });

            modelBuilder.Entity("BookCategory", b =>
                {
                    b.Property<Guid>("booksbook_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("categoriescategory_id")
                        .HasColumnType("uuid");

                    b.HasKey("booksbook_id", "categoriescategory_id");

                    b.HasIndex("categoriescategory_id");

                    b.ToTable("BookCategory");
                });

            modelBuilder.Entity("Library.API.models.Author", b =>
                {
                    b.Property<Guid>("author_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("lastName")
                        .HasColumnType("text");

                    b.HasKey("author_id");

                    b.ToTable("authors");
                });

            modelBuilder.Entity("Library.API.models.Book", b =>
                {
                    b.Property<Guid>("book_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("cover")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("https://justfunfacts.com/wp-content/uploads/2021/03/black.jpg");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<string>("isbn")
                        .HasColumnType("text");

                    b.Property<int?>("pages")
                        .HasColumnType("integer");

                    b.Property<string>("publisher")
                        .HasColumnType("text");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("yearOfPublication")
                        .HasColumnType("integer");

                    b.HasKey("book_id");

                    b.ToTable("books");
                });

            modelBuilder.Entity("Library.API.models.Book_Instance", b =>
                {
                    b.Property<Guid>("book_instance_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("book_id_fk")
                        .HasColumnType("uuid");

                    b.Property<Guid>("bookshelf_id_fk")
                        .HasColumnType("uuid");

                    b.Property<int>("status_id_fk")
                        .HasColumnType("integer");

                    b.HasKey("book_instance_id");

                    b.HasIndex("book_id_fk");

                    b.HasIndex("bookshelf_id_fk");

                    b.HasIndex("status_id_fk");

                    b.ToTable("book_instances");
                });

            modelBuilder.Entity("Library.API.models.Bookshelf", b =>
                {
                    b.Property<Guid>("bookshelf_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("floor")
                        .HasColumnType("integer");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("bookshelf_id");

                    b.ToTable("bookshelfs");
                });

            modelBuilder.Entity("Library.API.models.Borrow", b =>
                {
                    b.Property<Guid>("borrow_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("book_instance_id_fk")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("borrowTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("extended")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("returnTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("returnedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("user_id_fk")
                        .HasColumnType("uuid");

                    b.HasKey("borrow_id");

                    b.HasIndex("book_instance_id_fk");

                    b.HasIndex("user_id_fk");

                    b.ToTable("borrows");
                });

            modelBuilder.Entity("Library.API.models.Category", b =>
                {
                    b.Property<Guid>("category_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("image")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("https://justfunfacts.com/wp-content/uploads/2021/03/black.jpg");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("category_id");

                    b.ToTable("categories");
                });

            modelBuilder.Entity("Library.API.models.Password", b =>
                {
                    b.Property<Guid>("password_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("hash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("salt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("user_id_fk")
                        .HasColumnType("uuid");

                    b.HasKey("password_id");

                    b.HasIndex("user_id_fk")
                        .IsUnique();

                    b.ToTable("passwords");
                });

            modelBuilder.Entity("Library.API.models.Status", b =>
                {
                    b.Property<int>("status_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("status_id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("status_id");

                    b.ToTable("statuses");
                });

            modelBuilder.Entity("Library.API.models.User", b =>
                {
                    b.Property<Guid>("user_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("is_admin")
                        .HasColumnType("boolean");

                    b.Property<string>("nickname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("user_id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("AuthorBook", b =>
                {
                    b.HasOne("Library.API.models.Author", null)
                        .WithMany()
                        .HasForeignKey("authorsauthor_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library.API.models.Book", null)
                        .WithMany()
                        .HasForeignKey("booksbook_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookCategory", b =>
                {
                    b.HasOne("Library.API.models.Book", null)
                        .WithMany()
                        .HasForeignKey("booksbook_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library.API.models.Category", null)
                        .WithMany()
                        .HasForeignKey("categoriescategory_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Library.API.models.Book_Instance", b =>
                {
                    b.HasOne("Library.API.models.Book", "book")
                        .WithMany("book_instances")
                        .HasForeignKey("book_id_fk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library.API.models.Bookshelf", "bookshelf")
                        .WithMany("book_instances")
                        .HasForeignKey("bookshelf_id_fk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library.API.models.Status", "status")
                        .WithMany("book_instances")
                        .HasForeignKey("status_id_fk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("book");

                    b.Navigation("bookshelf");

                    b.Navigation("status");
                });

            modelBuilder.Entity("Library.API.models.Borrow", b =>
                {
                    b.HasOne("Library.API.models.Book_Instance", "book_instance")
                        .WithMany("borrows")
                        .HasForeignKey("book_instance_id_fk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library.API.models.User", "user")
                        .WithMany("borrowed")
                        .HasForeignKey("user_id_fk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("book_instance");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Library.API.models.Password", b =>
                {
                    b.HasOne("Library.API.models.User", "user")
                        .WithOne("password")
                        .HasForeignKey("Library.API.models.Password", "user_id_fk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("Library.API.models.Book", b =>
                {
                    b.Navigation("book_instances");
                });

            modelBuilder.Entity("Library.API.models.Book_Instance", b =>
                {
                    b.Navigation("borrows");
                });

            modelBuilder.Entity("Library.API.models.Bookshelf", b =>
                {
                    b.Navigation("book_instances");
                });

            modelBuilder.Entity("Library.API.models.Status", b =>
                {
                    b.Navigation("book_instances");
                });

            modelBuilder.Entity("Library.API.models.User", b =>
                {
                    b.Navigation("borrowed");

                    b.Navigation("password")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
